!> TCS.SDCL -- TCS frontend for working w/source files w/TCS files in [.TCS].
##############################################################################
### Use TCS HELP to view the usage documenation.
###
### This program implments commands for working with single source
### files and TCS such that FILE.TYPE has a corresponding TCS file
### [.TCS]FILE.TYPE-TCS.
##############################################################################
    SS$_BADPARAM = %x0014
    wso :== write sys$output
    wse :== write sys$error
    TRUE = 1 .eq. 1
    FALSE = 1 .ne. 1
    QUIET = %x10000000

    months_jan = "01"
    months_feb = "02"
    months_mar = "03"
    months_apr = "04"
    months_may = "05"
    months_jun = "06"
    months_jul = "07"
    months_aug = "08"
    months_sep = "09"
    months_oct = "10"
    months_nov = "11"
    months_dec = "12"

    debugging = f$type (tcs_debugging) .nes. ""
    verbose = FALSE
    nodelete = FALSE
    diffcmd = "diff"                    # Default to VMS diff.
    revision = ""
    ignoredtypes = ""

    command = p1

    if (command .eqs. "HELP" .or.
        command .eqs. "-H" .or.
        command .eqs. "-HELP" .or.
        command .eqs. "-?")
    {
        goto usage
    }

    if ((command .eqs. "") .or.
        .not. (command .eqs. "ADMIN"    .or.
               command .eqs. "DELTA"    .or.
               command .eqs. "DIFF"     .or. 
               command .eqs. "GET"      .or.
               command .eqs. "INIT"     .or.
               command .eqs. "MV"       .or.
               command .eqs. "OUTDATED" .or.
               command .eqs. "UNCOVERED"))
    {
        wse "tcs: unrecognized TCS command: """, command, """"
        exit 2
    }

    param_idx = 2
    num_options = 0
    outfile = ""
    ## Right now, option handling is not handled separately for each command.
    while (f$extract (0, 1, p'param_idx') .eqs. "-") {
        opt = p'param_idx'
        opt_len = f$length (opt)

        ## First, we'll handle specific options.
        if (f$extract (0, 2, opt) .eqs. "-O") { # Remember, DCL upcases everything!
            outfile = f$extract (2, opt_len, opt)
        } else if (f$extract (0, 2, opt) .eqs. "-R") {
            # revision = """-r" + f$extract (2, opt_len, opt) + """"
            revision = "-r" + f$extract (2, opt_len, opt)
        } else if (opt .eqs. "-NODELETE") {
            nodelete = TRUE
        } else if (opt .eqs. "-STDIFF") {
            diffcmd = "stdiff"
        } else if (f$locate ("-IGNORE", opt) .nes. opt_len) {
            pos = f$locate ("=", opt)
            if (pos .nes. opt_len) {    # File types to ignore specified
                    ignoredtypes = f$extract (pos + 1, opt_len, opt)
            } else {                    # Ill-formed -IGNORE=TYPE[,...]
                wse "tcs diff: ill formed -IGNORE: ", opt
                exit SS$_BADPARAM
            }
        } else {
            ## Other options are accumulated and then passed on to options.
            num_options = num_options + 1
            options_'num_options' = opt
        }
        param_idx = param_idx + 1
    }

    file1 = p'param_idx'                         # Can be blank
    dirname = f$search ("TCS.DIR")
    if (dirname .eqs. "") {             # No [.TCS] direcdtory.
        create/dir [.TCS]
    }

    tcsfile = "[.tcs]" + file1 + "-TCS"  # Not used by some commands.

    if (debugging) {
        wso "command: ", command, " file1: ", file1, " tcsfile: ", tcsfile
        wso "outfile: """, outfile, """"
    }

    goto do_'command'

    wso "tcs: This should be impossible, so somebody screwed up.  Exiting."
    exit 2 .or. QUIET


do_admin:
    result = f$search (tcsfile)
    if (result .nes. "") {
        wse "tcs: TCS file ", tcsfile, " already exists, exiting."
        exit 2
    }
    file1 = f$edit (file1, "LOWERCASE")
    dclcmd = "admin ""-i''file1'"" ''tcsfile'"
    wso "Executing ", dclcmd
    define/user sys$input sys$command
    'dclcmd'
    exit


do_delta:
    result = f$search (tcsfile)
    if (result .eqs. "") {
        wse "tcs: TCS file ", tcsfile, " does not exist, exiting."
        exit 2
    }
    define/user sys$input sys$command
    delta 'file1' 'tcsfile'
    exit


do_diff:
    # Diff defaults device and directory to that of first argument,
    # so fill those in for the current source using f$parse().
    filespec = f$parse (file1)   

    filename = f$parse (filespec,,, "NAME")
    filetype = f$parse (filespec,,, "TYPE")
    histfile = "[.TCS]" + filename + filetype + "-TCS"
    revfile = "SYS$SCRATCH:" + filename + filetype + "-TMP"
    write sys$output "histfile: ", histfile, " revfile: ", revfile
    if (revision .nes. "") write sys$output "revision: ", revision
    get 'revision' 'histfile' >'revfile'
    'diffcmd' 'revfile' 'filespec'
    if (.not. nodelete) delete/log 'revfile';0
    else write sys$error "stcsdiff: temporary file ", revfile, " left behind."
    exit


do_get:
    if (outfile .eqs. "") {
        get 'revision' 'options_1' 'options_2' 'options_3' 'options_4' 'tcsfile'
    } else {
        get 'revision' 'options_1' 'options_2' 'options_3' 'options_4' 'tcsfile' >'outfile'
    }
    exit

do_init:
    if (ignoredtypes .nes. "") ignoredtypes = "," + ignoredtypes
    ignoredtypes_len = f$length (ignoredtypes)
    tmpfile = "SYS$SCRATCH:INITCHECKIN-" + f$getjpi ("", "PID") + ".TMP"
    copy sys$input 'tmpfile'
    //Initial checkin.
    //.
    filespec = file1
    if (filespec .eqs. "") filespec = "*.*"
    filespec = f$parse (";0", filespec)
    repeat {
        file = f$search (filespec, 1)
        if (verbose) wse "file: ", file
        if (file .eqs. filespec) break  # No match for wildcard
        if (file .eqs. "") break        # No more matches for wildcard
        name = f$parse (file,,, "NAME")
        type = f$parse (file,,, "TYPE")
        workfile = name + type
        wse "workfile: ", workfile
        if ((type .eqs. ".DIR") .or. 
            (type .eqs. ".EXE") .or.
            (type .eqs. ".LIS") .or.
            (type .eqs. ".MAP") .or.
            (type .eqs. ".OBJ") .or.
            (type .eqs. ".OLB"))
        {
            wse "Skipping ", workfile
            next
        }
        # Skip the ignored file types.
        skip = "," + (type - ".")
        if (debugging) wse "skip: ", skip, " ignoredtypes: ", ignoredtypes
        if (f$locate (skip, ignoredtypes) .ne. ignoredtypes_len) {
            wse "Skipping user specified extension for ", workfile
            next
        }
        define/user sys$command 'tmpfile'
        tcs admin 'workfile'
        wso "Entered ", workfile
    }
    delete/log 'tmpfile';0
    exit

do_mv:
    i = param_idx + 1
    to_file = p'i'
    from_file = f$parse (";*", file1)
    to_file = f$parse (";*", to_file)
    if (debugging) wse "from_file: ", from_file, " to_file: ", to_file
    from_tcs_device = f$parse (from_file,,, "DEVICE")
    from_tcs_directory = f$parse (from_file,,, "DIRECTORY")
    from_tcs_name = f$parse (from_file,,, "NAME")
    from_tcs_type = f$parse (from_file,,, "TYPE") + "-TCS"
    from_tcs_file = from_tcs_device + (from_tcs_directory - "]") + ".TCS]" + \
        from_tcs_name + from_tcs_type + ";*"
    to_tcs_device = f$parse (to_file,,, "DEVICE")
    to_tcs_directory = f$parse (to_file,,, "DIRECTORY")
    to_tcs_name = f$parse (to_file,,, "NAME")
    to_tcs_type = f$parse (to_file,,, "TYPE") + "-TCS"
    to_tcs_file = to_tcs_device + (to_tcs_directory - "]") + ".TCS]" + \
        to_tcs_name + to_tcs_type + ";*"
    if (debugging) wse "from_tcs_file: ", from_tcs_file, " to_tcs_file: ", to_tcs_file
    rename 'from_file' 'to_file'/log
    rename 'from_tcs_file' 'to_tcs_file/log
    exit
    

do_outdated:
    filespec = "[.tcs]*.*-tcs"
    repeat {
        tcsfile = f$search (filespec)
        if (tcsfile .eqs. "") break
        tcsrdt = f$file (tcsfile, "RDT")
        tcs_day     = f$extract (00, 02, tcsrdt)
        tcs_monname = f$extract (03, 03, tcsrdt)
        tcs_year    = f$extract (07, 04, tcsrdt)
        tcs_rest    = f$extract (11, 12, tcsrdt)
        tcs_monnum  = months_'tcs_monname'
        tcs_cmpdate = tcs_year + tcs_monnum + tcs_day + tcs_rest
        if (debugging .and. verbose) wso "tcs_cmpdate: ", tcs_cmpdate
        dirname = f$parse (tcsfile,,, "DIRECTORY") - ".TCS]" + "]"
        filename = f$parse (tcsfile,,, "NAME")
        filetype = f$parse (tcsfile,,, "TYPE") - "-TCS"
        srcfile = filename + filetype
        srcrdt = f$file (srcfile, "RDT")
        src_day     = f$extract (00, 02, srcrdt)
        src_monname = f$extract (03, 03, srcrdt)
        src_year    = f$extract (07, 04, srcrdt)
        src_rest    = f$extract (11, 12, srcrdt)
        src_monnum  = months_'src_monname'
        src_cmpdate = src_year + src_monnum + src_day + src_rest
        if (debugging .and. verbose) wso "src_cmpdate: ", src_cmpdate
        if (src_cmpdate .gts. tcs_cmpdate) wso srcfile, " is newer than ", tcsfile
    }
    exit


do_uncovered:
    i = param_idx + 1
    if (ignoredtypes .nes. "") ignoredtypes = "," + ignoredtypes
    if (debugging) wse "ignoredtypes: ", ignoredtypes
    ignoredtypes_len = f$length (ignoredtypes)
    if (file1 .eqs. "") filespec = "*.*"
    else filespec = file1
    if (debugging) wse "filespec: ", filespec
    old_result = ""
    repeat {
        result = f$search (filespec, 1)
        if (debugging) wso "result: ", result
        # No more results
        if (result .eqs. "") break
        # No wildcard specified
        if (result .eqs. old_result) break 
        old_result = result
        filename = f$parse (result,,, "NAME")
        filetype = f$parse (result,,, "TYPE")
        file = filename + filetype 
        # Ignore directories
        if (filetype .eqs. ".DIR") next 
        # Skip the ignored file types.
        skip = "," + (filetype - ".")
        if (debugging) wse "skip: ", skip, " ignoredtypes: ", ignoredtypes
        if (f$locate (skip, ignoredtypes) .ne. ignoredtypes_len) {
            if (debugging) wse "Skipping ", file
            next
        }
        tcsfile = "[.TCS]" + file + "-TCS"
        if (f$search (tcsfile) .eqs. "") {
            if (verbose) wso file, " does not have a ", tcsfile
            else wso file
        }
    }
    exit


usage:
    copy sys$input sys$output
//TCS frontend for working with source files with associated TCS files in
//a [.TCS] directory.
//
//usage:
//tcs [ help | -h | -help | -? ]
//      Output this help message.
//
//tcs admin FILE
//
//      Initialize TCS file [.TCS]FILE-TCS from FILE.
//
//tcs delta FILE
//
//      Add a new version to TCS file [.TCS]FILE from FILE.
//
//tcs diff [-nodelete] [-rM.N] [-stdiff] FILE
//
//      Compare FILE to a revision from corresponding TCS file, defaulting
//      to the most recent.
//
//      -nodelete      Don't delete the temporary file extracted from the
//                     TCS file.
//
//      -rM.M          Compare to revision M.N instead of the most recent.
//
//      -stdiff        Use SWTOOLS VOS diff instead of VMS diff.
//
//tcs get [-oOUTFILE] [-h] [-rM.N] FILE
//
//      Get a revision of FILE from TCS file [.TCS]FILE-TCS
//
//          -oOUTFILE  writes the output to OUTFILE.
//                     If -o is not specifed the output goes to standard output.
//
//          -h         Output history information instead of a revision.
//
//          -rM.N      Output revision M.N.
//
//tcs init -ignored=IGNOREDTYPES [FILESPEC]
// 
//      Put files in the current directory under TCS revision control.  If
//      FILESPEC is specified it should be a wildcard and only files
//      matching the wildard will be put in TCS revision control
//
//      If IGNOREDTYPES is specified it should be a single file type
//      (without the ".") or a comma separated list of file types
//      to be ignored.
//
//      Note that .DIR, .EXE, .LIS, .MAP, .OBJ, and .OLB files are
//      always skipped.
//
//tcs mv FILE NEWFILE
//
//      Move (rename) FILE to NEWFILE and rename its .TCS file as well.
//
//tcs outdated
//
//      List all the source files that are newer than their corresponding
//      TCS file in [.TCS].
//
//tcs uncovered [-ignore=IGNOREDTYPES] [FILESPEC]
//
//      List all the files in the current directory that do not have
//      corresponding files in [.TCS].
//
//      If FILEPSEC is specified it should be a VMS wildcard that
//      will be applied to the current directory for matching.
//
//      If IGNOREDTYPES is specified it should be a single file type
//      (without the ".") or a comma separated list of file types
//      to be ignored.
    exit 2 .or. QUIET
