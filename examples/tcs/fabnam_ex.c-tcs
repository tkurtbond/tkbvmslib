%%s 0/0/0
%%d D 1.1 16-Aug-24 09:53:51 tkb 1 0
%%c Initial checkin.
%%T
%%I 1
/* Using Parse and Search Services */
#include <stdio.h>
#include <ssdef.h>
#include <stsdef.h>
#include <string.h>
#include <rms.h>
#include <starlet.h>
#define MAXLINE 256
static int rms_status; /* RMS status variable */
static char ibuf[MAXLINE], /* input buffer */
  obuf[MAXLINE], /* output buffer */
  fbuf[MAXLINE], /* filename buffer */
  xbuf[MAXLINE]; /* expanded filename buffer */
struct FAB filfab;
/* FAB for $PARSE and $SEARCH */
struct NAM filnam;
/* NAM for $PARSE and $SEARCH */
void init()
/* Initialize RMS structures */
{
  filfab = cc$rms_fab; /* Get a FAB */
  filfab.fab$l_fna = ibuf; /* Parse filename from IBUF */
  filfab.fab$b_fac = FAB$M_GET; /* Only allow $GETs */
  filfab.fab$l_fop = FAB$M_NAM; /* Use the NAM block for filename */
  filfab.fab$l_nam = &filnam; /* -> NAM block */
  filnam = cc$rms_nam; /* Get a NAM block */
  filnam.nam$l_esa = xbuf; /* -> Expanded filespec buffer */
  filnam.nam$b_ess = 255; /* Expanded filespec buffer length */
  filnam.nam$l_rsa = fbuf;
  /* -> Resultant filespec buffer */
  filnam.nam$b_rss = 255;
  /* Resultant filespec buffer length */
}
main()
{
  auto FILE *fil; /* File pointer for file functions */
  auto int i; /* Generic loop variable */
  init();
  /* Initialize RMS structures */
  /* Get filespec to search */
  fputs("File: ", stdout);
  if (!gets(ibuf)) return;
  /* Validate filespec */
  filfab.fab$b_fns = strlen(ibuf);
  if (((rms_status = sys$parse(&filfab)) & STS$M_SUCCESS) == 0)
    return (rms_status);
  /* Get search string */
  fputs("String: ", stdout);
  if (!gets(ibuf)) return;
  /* Loop for all files matching filespec */
  while ((rms_status = sys$search(&filfab)) & STS$M_SUCCESS)
    {
      /* Output a row of asterisks, the filename,
         and other row of asterisks */
      for (i = 0; i < 80; i++)
        obuf[i] = '*';
      obuf[80] = '\0';
      puts(obuf);
      fbuf[filnam.nam$b_rsl] = '\0'; /* Add <NUL> terminator */
      puts(fbuf);
      puts(obuf);
      if (fil = fopen(fbuf, "r")) /* Try to open the file */
        {
          /* Process the file... */
          while (fgets(obuf, MAXLINE, fil))
            if (strstr(obuf, ibuf)) fputs(obuf, stdout);
          fclose(fil); /* Done with this file */
        }
      putchar('\f');
      /* Print <FF> between files */
    }
  if ((rms_status == RMS$_FNF) || (rms_status == RMS$_NMF))
    rms_status = SS$_NORMAL; /* Handle expected errors */
  return(rms_status);
}
%%E 1
